@page "/User/UpdateUser/{Id:int}"
@inject IUserService UserService
@inject NavigationManager Navigation

<h3>Update User</h3>

@if (notFoundError)
{
    <p class="alert alert-danger">Not Found</p>
}

@if (user is not null)
{
    <EditForm Model="user" OnValidSubmit=Save>
        <DataAnnotationsValidator />

        <div class="mb-3">
            <label class="form-label">
                Username
                <InputText class="form-control" placeholder="Username" @bind-Value=user.Username />
            </label>
            <ValidationMessage For="()=> user.Username" />
        </div>

        <div class="mb-3">
            <label class="form-label">
                Password
                <InputText type="password" class="form-control" placeholder="Password" @bind-Value=user.Password />
            </label>
            <ValidationMessage For="()=> user.Password" />
        </div>

        @if (operationError)
        {
            <p class="alert alert-danger">The operation was not succeeded</p>
        }

        <button type="submit" class="btn btn-primary">Save</button>
    </EditForm>
}

@code {
    [Parameter]
    public int Id { get; set; }

    private bool notFoundError = false;
    private bool operationError = false;

    private RegisterUserDto user;

    protected override async Task OnInitializedAsync()
    {
        var userDto = await UserService.GetUserAsync(Id);

        if(userDto is null){
            notFoundError = true;
        }
        else
        {
            user = new();
            user.Username = userDto.Username;
        }
    }

    private async Task Save(){
        operationError = false;

        var createdUser = await UserService.UpdateUserAsync(Id, user);

        if (createdUser is not null)
            Navigation.NavigateTo("User");

        operationError = true;
    }
}
