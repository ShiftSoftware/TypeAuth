@page "/User"
@inject IUserService UserService

<h3>Users</h3>

<a href="User/CreateUser" class="btn btn-link btn-primary">Create New User</a>

@if (users is not null)
{
    <table class="table table-striped">
        <thead>
            <tr>
                <th>Username</th>
                <th>Roles</th>
                <th></th>
            </tr>
        </thead>
        <tbody>
            @foreach (var user in users)
            {
                <tr>
                    <td>
                        <a href="User/SetUserInRole/@user.Id">
                            @user.Username
                        </a>
                    </td>
                    <td>
                        @String.Join(',' , user.Roles.Select(x=> x.Name))
                    </td>
                    <td>
                        <a href="User/UpdateUser/@user.Id" class="btn btn-link">
                            <span class="oi oi-pencil"></span>
                        </a>
                        <span class="btn btn-link" @onclick="@(()=> RemoveUser(user.Id))">
                            <span class="oi oi-trash"></span>
                        </span>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private List<UserDto> users;

    protected override async Task OnInitializedAsync()
    {
        users = await UserService.GetUsersAsync();
    }

    private async Task RemoveUser(int userId)
    {
        var result = await UserService.RemoveUserAsync(userId);

        if (result)
            users.RemoveAll(x => x.Id == userId);
    }
}
